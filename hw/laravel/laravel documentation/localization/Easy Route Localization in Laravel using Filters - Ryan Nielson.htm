<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us"><head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
  <link href="http://gmpg.org/xfn/11" rel="profile">

  <title>
    Easy Route Localization in Laravel using Filters - 
    Ryan Nielson
  </title>

  <!-- CSS -->
  <link rel="stylesheet" href="Easy%20Route%20Localization%20in%20Laravel%20using%20Filters%20-%20Ryan%20Nielson_files/hyde.css">
  <link rel="stylesheet" href="Easy%20Route%20Localization%20in%20Laravel%20using%20Filters%20-%20Ryan%20Nielson_files/syntax.css">
  <link rel="stylesheet" href="Easy%20Route%20Localization%20in%20Laravel%20using%20Filters%20-%20Ryan%20Nielson_files/css.css">

  <!-- Icons -->
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="http://nielson.io/public/touch-icon-144-precomposed.png">
  <link rel="shortcut icon" href="http://nielson.io/public/favicon.png">

  <!-- RSS -->
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://nielson.io/atom.xml">

  
  <script src="Easy%20Route%20Localization%20in%20Laravel%20using%20Filters%20-%20Ryan%20Nielson_files/analytics.js" async=""></script><script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-39338095-2', 'nielson.io');
    ga('send', 'pageview');
  </script>
  
<script src="Easy%20Route%20Localization%20in%20Laravel%20using%20Filters%20-%20Ryan%20Nielson_files/embed.js" async="" type="text/javascript"></script><script src="Easy%20Route%20Localization%20in%20Laravel%20using%20Filters%20-%20Ryan%20Nielson_files/count.js" type="text/javascript" async=""></script></head>


  <body>
    <header class="masthead">
      <div class="masthead-inner">
        <h1>Ryan Nielson</h1>
        <p class="lead">The personal site and blog of Ryan Nielson.</p>

        <div class="colophon">
          <ul class="colophon-links">
            <li>
              <a href="http://nielson.io/">Home</a>
            </li>
            <li>
              <a href="https://github.com/RyanNielson">GitHub</a>
            </li>
            <li>
              <a href="https://twitter.com/RyanNielson">Twitter</a>
            </li>
          </ul>
          <p>Â© 2014. Ryan Nielson All rights reserved.</p>
        </div>
      </div>
    </header>

    <div class="content container">
      <div class="post">
  <h1>Easy Route Localization in Laravel using Filters</h1>
  <span class="post-date">12 May 2014</span>
  <p>Laravel already handles localization, and its filter system can 
make it quite easy to add content localization for any number of 
languages. This post will describe a simple approach to localization 
using route filters.</p>

<p>For testing this, I've created the following test translation files 
and view. I also made sure the configuration settings match the default 
localization that I want. I've commented the code below to describe what
 file the code is in. It uses the built-in Laravel functionality to 
handle different localization strings based on locale and I also use the
 <code>trans</code> helper function in the view to fetch the localized strings.</p>

<div class="highlight"><pre><code class="language-html-php" data-lang="html+php"><span class="c1">// app/lang/en/localization_test.php</span>
<span class="k">return</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'title'</span> <span class="o">=&gt;</span> <span class="s1">'English title'</span><span class="p">,</span>
    <span class="s1">'subtitle'</span> <span class="o">=&gt;</span> <span class="s1">'English subtitle'</span><span class="p">,</span>
<span class="p">);</span>

<span class="c1">// app/lang/fr/localization_test.php</span>
<span class="k">return</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'title'</span> <span class="o">=&gt;</span> <span class="s1">'French title'</span><span class="p">,</span>
    <span class="s1">'subtitle'</span> <span class="o">=&gt;</span> <span class="s1">'French subtitle'</span><span class="p">,</span>
<span class="p">);</span>

<span class="c1">// app/views/localization_test.php</span>
<span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{{</span> <span class="nx">trans</span><span class="p">(</span><span class="s1">'localization_test.title'</span><span class="p">)</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">{{</span> <span class="nx">trans</span><span class="p">(</span><span class="s1">'localization_test.subtitle'</span><span class="p">)</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>

<span class="c1">// Ensure the following configuration values are set in app/config/app.php</span>
<span class="s1">'locale'</span> <span class="o">=&gt;</span> <span class="s1">'en'</span>
<span class="s1">'fallback_locale'</span> <span class="o">=&gt;</span> <span class="s1">'en'</span></code></pre></div>

<p>The first thing we have to do is create our filter. In <code>app/filters.php</code> add the following code. It checks the input for the <code>lang</code> value, and sets the locale for Laravel to use when handling localization. In our case, the <code>lang</code>
 value is retrieved from the URL. For any route that we wish to add 
localization, we simple have to make sure it runs through this filter 
first. </p>

<div class="highlight"><pre><code class="language-html-php" data-lang="html+php"><span class="nx">Route</span><span class="o">::</span><span class="na">filter</span><span class="p">(</span><span class="s1">'localization'</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">App</span><span class="o">::</span><span class="na">setLocale</span><span class="p">(</span><span class="nx">Route</span><span class="o">::</span><span class="na">input</span><span class="p">(</span><span class="s1">'lang'</span><span class="p">));</span>
<span class="p">});</span></code></pre></div>

<p>Now within <code>app/routes.php</code> it's just a matter of ensuring that we use the filter for any routes we want localized. Below is what the <code>routes.php</code> file currently looks like for testing purposes. If you want to localize all routes, it's just a matter of wrapping them using <code>Route::group</code> like in the following example.</p>

<div class="highlight"><pre><code class="language-html-php" data-lang="html+php"><span class="nx">Route</span><span class="o">::</span><span class="na">group</span><span class="p">([</span><span class="s1">'prefix'</span> <span class="o">=&gt;</span> <span class="s1">'{lang?}'</span><span class="p">,</span> <span class="s1">'before'</span> <span class="o">=&gt;</span> <span class="s1">'localization'</span><span class="p">],</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">'localization_test'</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span></code></pre></div>

<p>The result of this is that visiting urls like <code>yoursite.com/en</code> or <code>yoursite.com/fr</code> will render the view with the correct translation strings. Also, because we set <code>locale</code> and <code>fallback_locale</code>, visiting <code>yoursite.com</code> will automatically show the English translations.</p>

<p>A side effect of using the filter like this is it's just a matter of 
prefixing any endpoints with the locale to get translated routes, as 
long as they're in the <code>Route::group</code> above. URLs like <code>yoursite.com/fr/blog</code>, <code>yoursite.com/en/blog</code>, and <code>yoursite.com/blog</code> will all show the same page with the expected translations when added to this group.</p>

<p>This method could also be used to add localized routes for specific 
users with just a few tweaks. It's just a matter of removing the <code>lang</code>
 prefix from the route group, and in the filter we just need to check 
the user's localization setting which could be stored as an attribute on
 the user model. You could also examine the request headers and try to 
get their locale from there.</p>

<div class="highlight"><pre><code class="language-html-php" data-lang="html+php"><span class="c1">// app/routes.php</span>
<span class="nx">Route</span><span class="o">::</span><span class="na">group</span><span class="p">([</span><span class="s1">'before'</span> <span class="o">=&gt;</span> <span class="s1">'localization'</span><span class="p">],</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">'localization_test'</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>

<span class="c1">// app/filters.php</span>
<span class="nx">Route</span><span class="o">::</span><span class="na">filter</span><span class="p">(</span><span class="s1">'localization'</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">App</span><span class="o">::</span><span class="na">setLocale</span><span class="p">(</span><span class="nx">Auth</span><span class="o">::</span><span class="na">user</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">locale</span><span class="p">);</span>
<span class="p">});</span></code></pre></div>

<p>Hopefully this has been helpful. The Laravel documentation has much more detailed information on <a href="http://laravel.com/docs/localization">localization</a> and <a href="http://laravel.com/docs/routing">routing</a>
 which you should read if you haven't already. If anyone has any other 
interesting ways to do localization please feel free to message me on 
Twitter <a href="https://twitter.com/ryannielson">@RyanNielson</a> or comment on this post.</p>

  
    <section id="disqus_thread"><iframe verticalscrolling="no" horizontalscrolling="no" src="Easy%20Route%20Localization%20in%20Laravel%20using%20Filters%20-%20Ryan%20Nielson_files/a.htm" style="width: 100% ! important; border: medium none ! important; overflow: hidden ! important; height: 2047px ! important;" title="Disqus" tabindex="0" scrolling="no" allowtransparency="true" data-disqus-uid="2" id="dsq-2" frameborder="0" width="100%"></iframe></section><!-- /#disqus_thread -->
    <script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'nielsonio'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function () {
        var s = document.createElement('script'); s.async = true;
        s.type = 'text/javascript';
        s.src = '//' + disqus_shortname + '.disqus.com/count.js';
        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>


  
</div>

<div class="related">
  <h2>Related Posts</h2>
  <ul class="related-posts">
    
      <li>
        <h3>
          <a href="http://nielson.io/2014/12/enter-the-murderdome-our-ludum-dare-31-submission">
            Enter the Murderdome - Our Ludum Dare 31 Submission
            <small>08 Dec 2014</small>
          </a>
        </h3>
      </li>
    
      <li>
        <h3>
          <a href="http://nielson.io/2014/07/awesome-unity">
            Awesome Unity: A Curated List of Unity Assets and Resources
            <small>30 Jul 2014</small>
          </a>
        </h3>
      </li>
    
      <li>
        <h3>
          <a href="http://nielson.io/2014/07/sprite-lighting-in-unity">
            Sprite Lighting in Unity
            <small>20 Jul 2014</small>
          </a>
        </h3>
      </li>
    
  </ul>
</div>

    </div>

  

</body></html>